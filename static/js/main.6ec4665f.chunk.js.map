{"version":3,"sources":["store/Context.tsx","components/QuestionsSettings.tsx","components/ModalScore.tsx","components/LeaderBoardModal.tsx","components/Homepage.tsx","reportWebVitals.ts","api/index.tsx","components/Questions.tsx","components/ModalSubmit.tsx","components/Quiz.tsx","store/Provider.tsx","index.tsx"],"names":["Context","React","createContext","QuestionsSettings","useState","numberOfQuestions","setNumberOfQuestions","difficulty","setDifficulty","questionType","setQuestionType","setSettings","useContext","useEffect","Heading","level","className","margin","Select","options","value","onChange","option","ModalScore","modalScore","setModalScore","scoreData","Modal","onClose","onOpen","open","Header","Content","Description","name","score","totalQuestions","Meter","values","label","onClick","color","Actions","LeaderBoardModal","setOpen","data","setData","leaderBord","localStorage","getItem","leaders","JSON","parse","trigger","length","List","primaryKey","secondaryKey","map","item","Homepage","history","useHistory","setDefaultData","Box","direction","border","size","pad","WorldMap","continents","places","location","Button","primary","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getQuestions","params","a","axios","get","response","Questions","questions","currentQuestion","setCurrentQuestion","answerToQuestion","answers","preSubmitQuestions","getNextQuestionIndex","question","find","_","index","setResponse","ans","id","labelForAnswer","dangerouslySetInnerHTML","__html","type","RadioButtonGroup","incorrect_answers","correct_answer","event","target","disabled","answered","nextQuestion","ModalSubmit","modalSubmit","setModalSubmit","submitQuestions","setName","console","log","TextInput","placeholder","style","width","e","Quiz","settings","setQuestions","isLoading","setIsLoading","getQuestionsAsyncFunction","res","results","Spinner","Clock","run","time","Anchor","href","getQuestionTypeValue","qType","Provider","children","amount","stateSettings","setStateSettings","setAnswers","setScoreData","Number","toLowerCase","answer","newAnswers","q","indexOf","forEach","setLocalFromEmpty","setItem","stringify","styleLink","document","createElement","rel","head","appendChild","ReactDOM","render","Fragment","exact","path","getElementById"],"mappings":"oPAIeA,EAFCC,IAAMC,cAAmB,I,OC4C1BC,MA1Cf,WACI,MAAkDC,mBAAiB,MAAnE,mBAAOC,EAAP,KAA0BC,EAA1B,KACA,EAAoCF,mBAAiB,QAArD,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAwCJ,mBAAiB,YAAzD,mBAAOK,EAAP,KAAqBC,EAArB,KACQC,EAAgBC,qBAAWZ,GAA3BW,YAKR,OAHAE,qBAAU,WACNF,EAAYN,EAAmBE,EAAYE,KAC5C,CAACJ,EAAmBE,EAAYE,IAE/B,qCACI,cAACK,EAAA,EAAD,CAASC,MAAO,EAAGC,UAAU,qBAAqBC,OAAO,OAAzD,qCACA,sBAAKD,UAAU,qBAAf,UACI,sBAAKA,UAAU,eAAf,UACI,cAACF,EAAA,EAAD,CAASC,MAAO,EAAGE,OAAO,OAA1B,iCACA,cAACC,EAAA,EAAD,CACIC,QAAS,CAAC,KAAM,KAAM,MACtBC,MAAOf,EACPgB,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBhB,EAAqBgB,SAGvD,sBAAKN,UAAU,eAAf,UACI,cAACF,EAAA,EAAD,CAASC,MAAO,EAAGE,OAAO,OAA1B,wBACA,cAACC,EAAA,EAAD,CACIC,QAAS,CAAC,OAAQ,SAAU,QAC5BC,MAAOb,EACPc,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBd,EAAcc,SAGhD,sBAAKN,UAAU,eAAf,UACI,cAACF,EAAA,EAAD,CAASC,MAAO,EAAGE,OAAO,OAA1B,2BACA,cAACC,EAAA,EAAD,CACIC,QAAS,CAAC,WAAY,kBAAmB,cACzCC,MAAOX,EACPY,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBZ,EAAgBY,gB,2BCAnDC,MAjCf,WACI,MAAiDX,qBAAWZ,GAApDwB,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,cAAeC,EAAnC,EAAmCA,UAEnC,OACI,eAACC,EAAA,EAAD,CACIC,QAAS,kBAAMH,GAAc,IAC7BI,OAAQ,kBAAMJ,GAAc,IAC5BK,KAAMN,EAHV,UAKI,cAACG,EAAA,EAAMI,OAAP,oBACA,eAACJ,EAAA,EAAMK,QAAP,WACI,cAACL,EAAA,EAAMM,YAAP,UACI,eAACnB,EAAA,EAAD,CAASC,MAAO,EAAGC,UAAU,QAA7B,8BAAuDU,EAAUQ,KAAjE,YAEJ,eAACpB,EAAA,EAAD,CAASC,MAAO,EAAGC,UAAU,QAA7B,2CAA6DU,QAA7D,IAA6DA,OAA7D,EAA6DA,EAAWS,MAAxE,cAAmFT,QAAnF,IAAmFA,OAAnF,EAAmFA,EAAWU,kBAC9F,cAACC,EAAA,EAAD,CACIC,OAAQ,CAAC,CACLlB,MAAyB,IAAlBM,EAAUS,OAAV,OAAwBT,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAWU,gBAC1CG,MAAO,WACPC,QAAS,eAEbC,MAAM,UACN,aAAW,aAInB,cAACd,EAAA,EAAMe,QAAP,UACI,cAAC,IAAD,CAAQF,QAAS,kBAAMf,GAAc,IAAQT,UAAU,2BAAvD,yB,SCgBD2B,MA5Cf,WACI,MAAwBvC,oBAAkB,GAA1C,mBAAO0B,EAAP,KAAac,EAAb,KACA,EAAwBxC,mBAAgB,IAAxC,mBAAOyC,EAAP,KAAaC,EAAb,KASA,OARAjC,qBAAU,WACN,IAAMkC,EAAqBC,aAAaC,QAAQ,eAChD,GAAIF,EAAY,CACZ,IAAMG,EAAUC,KAAKC,MAAML,GAC3BD,EAAQI,MAEb,IAGC,eAACvB,EAAA,EAAD,CACIC,QAAS,kBAAMgB,GAAQ,IACvBf,OAAQ,kBAAMe,GAAQ,IACtBd,KAAMA,EACNuB,QAAS,sBAAMrC,UAAU,qBAAhB,8BAJb,UAMI,cAACW,EAAA,EAAMI,OAAP,0BACA,eAACJ,EAAA,EAAMK,QAAP,WACI,cAACL,EAAA,EAAMM,YAAP,UACI,cAACnB,EAAA,EAAD,CAASC,MAAO,EAAGC,UAAU,QAA7B,yDAEJ,sBAAKA,UAAU,aAAf,YACK,OAAC6B,QAAD,IAACA,OAAD,EAACA,EAAMS,SAAU,gBACjBT,GAAQ,cAACU,EAAA,EAAD,CACLC,WAAW,OACXC,aAAa,QACbZ,KAAMA,EAAKa,KAAI,SAAAC,GAAI,MAAK,CACpBzB,KAAI,OAAEyB,QAAF,IAAEA,OAAF,EAAEA,EAAMzB,KACZC,MAAM,GAAD,cAAKwB,QAAL,IAAKA,OAAL,EAAKA,EAAMxB,MAAX,mBAAoBwB,QAApB,IAAoBA,OAApB,EAAoBA,EAAMvB,4BAO/C,cAACT,EAAA,EAAMe,QAAP,UACI,cAAC,IAAD,CAAQF,QAAS,kBAAMI,GAAQ,IAAQ5B,UAAU,2BAAjD,yBCmBD4C,MArDf,WACI,IAAMC,EAAUC,cACRC,EAAmBnD,qBAAWZ,GAA9B+D,eAKR,OAJAlD,qBAAU,WACNkD,MACD,IAGC,sBAAK/C,UAAU,MAAf,UACI,eAACgD,EAAA,EAAD,CACIC,UAAU,MACVC,OAAQ,CAAEzB,MAAO,QAAS0B,KAAM,SAChCC,IAAI,SACJpD,UAAU,cAJd,UAMI,8BACI,cAACF,EAAA,EAAD,CAASC,MAAO,EAAGC,UAAU,QAA7B,qCAEJ,8BACI,cAACqD,EAAA,EAAD,CACI5B,MAAM,YACN6B,WAAY,CACR,CACIpC,KAAM,SACNO,MAAO,UACPD,QAAS,SAACN,OAGlBqC,OAAQ,CACJ,CACIrC,KAAM,SACNsC,SAAU,EAAE,cAAe,eAC3B/B,MAAO,WACPD,QAAS,SAACN,WAK1B,8BACI,cAAC,EAAD,MAEJ,qBAAKlB,UAAU,iBAAf,SACI,cAACyD,EAAA,EAAD,CAAQC,SAAO,EAACnC,MAAM,iBAAiBC,QAAS,WAC5CqB,EAAQc,KAAK,cAGrB,cAAC,EAAD,OAEJ,cAAC,EAAD,QC1CGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,sECPDQ,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACDC,IAAMC,IAAI,8BAA+B,CAC5DH,WAFoB,cAClBI,EADkB,yBAIjBA,EAAS7C,MAJQ,2CAAH,sD,iBCyEV8C,MAxEf,WAEI,MAAgI/E,qBAAWZ,GAAnI4F,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,gBAAiBC,EAApC,EAAoCA,mBAAoBC,EAAxD,EAAwDA,iBAAkBC,EAA1E,EAA0EA,QAASC,EAAnF,EAAmFA,mBAAoBC,EAAvG,EAAuGA,qBACjGC,EAAWP,EAAUQ,MAAK,SAACC,EAAQC,GAAT,OAA2BA,IAAUT,KACrE,EAAgCzF,mBAAc,IAA9C,mBAAOsF,EAAP,KAAiBa,EAAjB,KAEA1F,qBAAU,WACN,IAAM2F,EAAG,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAASI,MAAK,SAACb,GAAD,OAAa,OAADA,QAAC,IAADA,OAAA,EAAAA,EAAGkB,MAAOZ,MAChD,OAAIW,QAAJ,IAAIA,OAAJ,EAAIA,EAAKd,UACLa,EAAW,OAACC,QAAD,IAACA,OAAD,EAACA,EAAKd,UAGjBa,EAAY,MAEjB,CAACV,IACJ,IAAMa,EAAc,UAAMV,EAAQ1C,SAAWsC,EAAUtC,OAAS,iCAAmC,UAEnG,OACI,8BACI,gCACI,cAACxC,EAAA,EAAD,CAASC,MAAO,EAAhB,SAAmB,mBAAG4F,wBAAyB,CAAEC,OAAM,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAUA,cAC/C,cAAX,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUU,OACP,cAACC,EAAA,EAAD,CACI5E,KAAK,kBACLf,QAAO,sBAAMgF,EAASY,mBAAf,CAAkCZ,EAASa,iBAClD5F,MAAOsE,EACPrE,SAAU,SAAC4F,GACPV,EAAYU,EAAMC,OAAO9F,OACzB2E,EAAiBkB,EAAMC,OAAO9F,MAAOyE,MAI7B,aAAX,OAARM,QAAQ,IAARA,OAAA,EAAAA,EAAUU,OACP,cAACC,EAAA,EAAD,CACI5E,KAAK,kBACLf,QAAS,CAAC,OAAQ,SAClBC,MAAOsE,EACPrE,SAAU,SAAC4F,GACPV,EAAYU,EAAMC,OAAO9F,OACzB2E,EAAiBkB,EAAMC,OAAO9F,MAAOyE,MAIjD,sBAAK7E,UAAU,kBAAf,UACI,cAACyD,EAAA,EAAD,CAAQC,SAAO,EAACyC,SAA8B,IAApBtB,EAAuBtD,MAAM,0BAA0BC,QAAS,WAClFqD,EAAkB,GAClBC,EAAmBD,EAAkB,MAG7C,cAACpB,EAAA,EAAD,CAAQC,SAAO,EAACyC,UAAWzB,EAAUnD,MAAOmE,EAAgBlE,QAAS,WAAO,IAAD,EACvE,GAAIwD,EAAQ1C,SAAWsC,EAAUtC,OAIjC,IAAa,OAATsC,QAAS,IAATA,GAAA,UAAAA,EAAYC,EAAkB,UAA9B,eAAkCuB,WAAYvB,EAAkB,IAAMD,EAAUtC,OAApF,CACI,IAAM+D,EAAenB,KACC,IAAlBmB,GACAvB,EAAmBuB,QAIvBxB,GAA2B,OAATD,QAAS,IAATA,OAAA,EAAAA,EAAWtC,QAAS,GACtCwC,EAAmBD,EAAkB,QAXrCI,UAeZ,sDAAkBJ,EAAkB,EAApC,mBAAyCD,QAAzC,IAAyCA,OAAzC,EAAyCA,EAAWtC,iB,SCtBrDgE,MAzCf,WACI,MAA6E1G,qBAAWZ,GAAhFuH,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,eAAgBxB,EAArC,EAAqCA,QAASJ,EAA9C,EAA8CA,UAAW6B,EAAzD,EAAyDA,gBACnD5D,EAAUC,cAChB,EAAwB1D,mBAAiB,IAAzC,mBAAO8B,EAAP,KAAawF,EAAb,KAGA,OAFAC,QAAQC,IAAI1F,GAGR,eAACP,EAAA,EAAD,CACIC,QAAS,kBAAM4F,GAAe,IAC9B3F,OAAQ,kBAAM2F,GAAe,IAC7B1F,KAAMyF,EAHV,UAKI,cAAC5F,EAAA,EAAMI,OAAP,kCACA,eAACJ,EAAA,EAAMK,QAAP,WACI,cAACL,EAAA,EAAMM,YAAP,UACI,cAACnB,EAAA,EAAD,CAASC,MAAO,EAAGC,UAAU,QAA7B,iEAEJ,eAACF,EAAA,EAAD,CAASC,MAAO,EAAGC,UAAU,QAA7B,6CAA+DgF,QAA/D,IAA+DA,OAA/D,EAA+DA,EAAS1C,OAAxE,cAAoFsC,QAApF,IAAoFA,OAApF,EAAoFA,EAAWtC,aAEnG,eAAC3B,EAAA,EAAMK,QAAP,WACI,cAAClB,EAAA,EAAD,CAASC,MAAO,EAAGC,UAAU,QAA7B,oCACA,cAAC6G,EAAA,EAAD,CAAWpB,GAAG,gBACVvE,KAAK,OACL4F,YAAY,OACZC,MAAO,CAAEC,MAAO,SAChB5G,MAAOc,EACPb,SAAU,SAAC4G,GAAD,OAA4CP,EAAQO,EAAEf,OAAO9F,aAE/E,eAACO,EAAA,EAAMe,QAAP,WACI,cAAC,IAAD,CAAQF,QAAS,kBAAMgF,GAAe,IAAtC,oBACA,cAAC,IAAD,CAAQhF,QAAS,WACbiF,EAAgBvF,GAChB2B,EAAQc,KAAK,MACd3D,UAAU,2BAHb,2BCwBDkH,MAtDf,WAEI,MAAmFtH,qBAAWZ,GAAtFmI,EAAR,EAAQA,SAAUvC,EAAlB,EAAkBA,UAAWwC,EAA7B,EAA6BA,aAAcvC,EAA3C,EAA2CA,gBAAiBC,EAA5D,EAA4DA,mBAC5D,EAAkC1F,oBAAkB,GAApD,mBAAOiI,EAAP,KAAkBC,EAAlB,KAEMC,EAAyB,uCAAG,4BAAAhD,EAAA,6DAC9B+C,GAAa,GADiB,SAEZjD,EAAa8C,GAFD,OAExBK,EAFwB,OAG9BF,GAAa,GACbF,EAAaI,EAAIC,SAJa,2CAAH,qDAU/B,OAJA5H,qBAAU,WACN0H,MACD,IAGC,qBAAKvH,UAAU,MAAf,SACI,eAACgD,EAAA,EAAD,CACIC,UAAU,MACVC,OAAQ,CAAEzB,MAAO,QAAS0B,KAAM,SAChCC,IAAI,SACJpD,UAAU,cAJd,UAMKqH,GAAa,qBAAKrH,UAAU,oBAAf,SAAmC,cAAC0H,EAAA,EAAD,CAASvE,KAAK,aAC7DkE,GACE,gCACI,qBAAKrH,UAAU,gBAAf,SACI,cAAC2H,EAAA,EAAD,CAAO9B,KAAK,UAAU+B,IAAI,WAAWC,KAAK,gBAE9C,8BACI,cAAC/H,EAAA,EAAD,CAASC,MAAO,EAAhB,oDAGJ,8BACI,cAAC,EAAD,MAEJ,8BACI,oBAAIC,UAAU,aAAd,SACK4E,EAAUlC,KAAI,SAACyC,EAAeG,GAC3B,OAAO,oBAA4BtF,UAAW6E,IAAoBS,EAAQ,SAAW,GAAI9D,QAAS,WAC9FsD,EAAmBQ,IADhB,SAEHA,EAAQ,GAFIH,EAASA,oBAQ7C,cAAC,EAAD,IACA,cAAC2C,EAAA,EAAD,CAAQC,KAAK,IAAIxG,MAAM,yB,gBClDjCyG,EAAuB,SAACC,GAC1B,OAAQA,GACJ,IAAK,kBACD,MAAO,WACX,IAAK,aACD,MAAO,UACX,QACI,MAAO,KA8IJC,EA1IE,SAAC,GAMZ,IAJEC,EAIH,EAJGA,SAKJ,EAA0C/I,mBAAc,CACpDgJ,OAAQ,GAAI7I,WAAY,OAAQsG,KAAM,aAD1C,mBAAOwC,EAAP,KAAsBC,EAAtB,KAGA,EAAkClJ,mBAAgB,IAAlD,mBAAOwF,EAAP,KAAkBwC,EAAlB,KACA,EAAsChI,oBAAkB,GAAxD,mBAAOmH,EAAP,KAAoBC,EAApB,KACA,EAA8CpH,mBAAiB,GAA/D,mBAAOyF,EAAP,KAAwBC,EAAxB,KACA,EAA8B1F,mBAAgB,IAA9C,mBAAO4F,EAAP,KAAgBuD,EAAhB,KACA,EAAkCnJ,mBAAc,IAAhD,mBAAOsB,EAAP,KAAkB8H,EAAlB,KACA,EAAoCpJ,oBAAkB,GAAtD,mBAAOoB,EAAP,KAAmBC,EAAnB,KAiGA,OACI,cAAC,EAAQyH,SAAT,CACI9H,MAAO,CACH2C,eAnGW,WACnBqE,EAAa,IACbtC,EAAmB,GACnBsC,EAAa,IACbmB,EAAW,IACXD,EAAiB,CACbF,OAAQ,GAAI7I,WAAY,OAAQsG,KAAM,cA8FlCsB,SAAUkB,EACV1I,YA5FQ,SAACyI,EAAgB7I,EAAoBsG,GACrDyC,EAAiB,CACbF,OAAQK,OAAOL,GACf7I,WAAYA,EAAWmJ,cACvB7C,KAAMmC,EAAqBnC,MAyFvBjB,YACAwC,eACAvC,kBACAC,qBACAE,UACAD,iBA3Fa,SAACL,EAAeY,GACrC,IAAMqD,EAAM,OAAG3D,QAAH,IAAGA,OAAH,EAAGA,EAASI,MAAK,SAAAuD,GAAM,OAAU,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQlD,MAAOH,KACtD,UAAIqD,QAAJ,IAAIA,OAAJ,EAAIA,EAAQjE,SAAU,CAClB,IAAMkE,EAAa5D,EAAQtC,KAAI,SAAA8C,GAC3B,OAAO,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKC,MAAOH,EACL,2BACAE,GADP,IAEId,aAGDc,KAEX+C,EAAWK,QAEXL,EAAW,GAAD,mBACHvD,GADG,CAEN,CACIS,GAAIH,EACJZ,eAGZ,IAAMmE,EAAC,YAAOjE,GACdiE,EAAEvD,GAAF,2BACOuD,EAAEvD,IADT,IAEIc,UAAU,IAEdgB,EAAayB,IAkEL5D,mBAhEe,WACvBuB,GAAe,IAgEPtB,qBAjBiB,WACzB,IAAMmB,EAAezB,EAAUQ,MAAK,SAAAyD,GAAC,QAAI,OAACA,QAAD,IAACA,OAAD,EAACA,EAAGzC,aAC7C,cAAOxB,QAAP,IAAOA,OAAP,EAAOA,EAAWkE,QAAQzC,IAgBlBE,cACAC,iBACAC,gBAhEY,SAACvF,GACrB,IAAIC,EAAQ,EACZ6D,EAAQ+D,SAAQ,SAAAJ,GACZhC,QAAQC,IAAI+B,EAAQ/D,EAAU+D,EAAOlD,KACjCkD,EAAOjE,WAAaE,EAAU+D,EAAOlD,IAAIO,gBACzC7E,OAGRqH,EAAa,CACTrH,QACAC,eAAc,OAAEwD,QAAF,IAAEA,OAAF,EAAEA,EAAWtC,OAC3BpB,KAAMA,GAAQ,SAElB,IAAM8H,EAAoB,kBAAMhH,aAAaiH,QAAQ,cAAe9G,KAAK+G,UAAU,CAC/E,CACI/H,QACAC,eAAc,OAAEwD,QAAF,IAAEA,OAAF,EAAEA,EAAWtC,OAC3BpB,KAAMA,GAAQ,YAGhBa,EAAqBC,aAAaC,QAAQ,eAChD,GAAIF,EAAY,CACZ,IAAMG,EAAUC,KAAKC,MAAML,GACvBG,EAAQI,OACRN,aAAaiH,QAAQ,cAAe9G,KAAK+G,UAAL,sBAC7BhH,GAD6B,CAEhC,CACIf,QACAC,eAAc,OAAEwD,QAAF,IAAEA,OAAF,EAAEA,EAAWtC,OAC3BpB,KAAMA,GAAQ,YAKtB8H,SAIJA,IAEJxC,GAAe,GACf/F,GAAc,IAwBNC,YACAF,aACAC,iBAlBR,SAqBK0H,KCxIPgB,EAAYC,SAASC,cAAc,QACzCF,EAAUG,IAAM,aAChBH,EAAUpB,KAAO,iEACjBqB,SAASG,KAAKC,YAAYL,GAE1BM,IAASC,OACP,cAAC,IAAMC,SAAP,UACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,eAMVT,SAASU,eAAe,SAM1BlG,M","file":"static/js/main.6ec4665f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Context = React.createContext<any>({});\n\nexport default Context;","import React, { useEffect, useState, useContext } from 'react';\nimport { Select, Heading } from 'grommet';\nimport Context from '../store/Context';\n\nfunction QuestionsSettings() {\n    const [numberOfQuestions, setNumberOfQuestions] = useState<String>('10');\n    const [difficulty, setDifficulty] = useState<String>('Easy');\n    const [questionType, setQuestionType] = useState<String>('Any Type');\n    const { setSettings } = useContext(Context);\n\n    useEffect(() => {\n        setSettings(numberOfQuestions, difficulty, questionType);\n    }, [numberOfQuestions, difficulty, questionType]);\n    return (\n        <>\n            <Heading level={3} className=\"mobile-text-center\" margin=\"none\">Configure the questions</Heading>\n            <div className=\"container-settings\">\n                <div className=\"setting-item\">\n                    <Heading level={4} margin=\"none\">Number of questions</Heading>\n                    <Select\n                        options={['10', '15', '20']}\n                        value={numberOfQuestions}\n                        onChange={({ option }) => setNumberOfQuestions(option)}\n                    />\n                </div>\n                <div className=\"setting-item\">\n                    <Heading level={4} margin=\"none\">Difficulty</Heading>\n                    <Select\n                        options={['Easy', 'Medium', 'Hard']}\n                        value={difficulty}\n                        onChange={({ option }) => setDifficulty(option)}\n                    />\n                </div>\n                <div className=\"setting-item\">\n                    <Heading level={4} margin=\"none\">Question Type</Heading>\n                    <Select\n                        options={['Any Type', 'Multiple Choice', 'True/False']}\n                        value={questionType}\n                        onChange={({ option }) => setQuestionType(option)}\n                    />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default QuestionsSettings;\n","import React, { useContext } from 'react';\nimport { Button, Modal } from 'semantic-ui-react';\nimport { Heading, Meter } from 'grommet';\nimport Context from '../store/Context';\n\nfunction ModalScore() {\n    const { modalScore, setModalScore, scoreData } = useContext(Context);\n\n    return (\n        <Modal\n            onClose={() => setModalScore(false)}\n            onOpen={() => setModalScore(true)}\n            open={modalScore}\n        >\n            <Modal.Header>Score</Modal.Header>\n            <Modal.Content>\n                <Modal.Description>\n                    <Heading level={3} className=\"title\">You are the best {scoreData.name}!!!!</Heading>\n                </Modal.Description>\n                <Heading level={4} className=\"title\">Total correct answers: {scoreData?.score} of {scoreData?.totalQuestions}</Heading>\n                <Meter\n                    values={[{\n                        value: scoreData.score * 100 / scoreData?.totalQuestions,\n                        label: 'Progress',\n                        onClick: () => { }\n                    }]}\n                    color=\"#7d4bda\"\n                    aria-label=\"meter\"\n                />\n            </Modal.Content>\n\n            <Modal.Actions>\n                <Button onClick={() => setModalScore(false)} className=\"background-color-primary\">Close</Button>\n            </Modal.Actions>\n        </Modal>\n    )\n}\n\nexport default ModalScore","import React, { useEffect, useState } from 'react';\nimport { Button, Modal } from 'semantic-ui-react';\nimport { Heading, List } from 'grommet';\n\nfunction LeaderBoardModal() {\n    const [open, setOpen] = useState<boolean>(false);\n    const [data, setData] = useState<any[]>([]);\n    useEffect(() => {\n        const leaderBord: string = localStorage.getItem('leaderBoard')!;\n        if (leaderBord) {\n            const leaders = JSON.parse(leaderBord);\n            setData(leaders);\n        }\n    }, []);\n\n    return (\n        <Modal\n            onClose={() => setOpen(false)}\n            onOpen={() => setOpen(true)}\n            open={open}\n            trigger={<span className=\"color-primary text\">Show Leaderboard</span>}\n        >\n            <Modal.Header>LeaderBoard</Modal.Header>\n            <Modal.Content>\n                <Modal.Description>\n                    <Heading level={3} className=\"title\">Here are the previous scores of the users</Heading>\n                </Modal.Description>\n                <div className=\"score-list\">\n                    {!data?.length && 'No data found'}\n                    {data && <List\n                        primaryKey=\"name\"\n                        secondaryKey=\"score\"\n                        data={data.map(item => ({\n                            name: item?.name,\n                            score: `${item?.score}/${item?.totalQuestions}`\n                        }))}\n                    />}\n                </div>\n\n            </Modal.Content>\n\n            <Modal.Actions>\n                <Button onClick={() => setOpen(false)} className=\"background-color-primary\">Close</Button>\n            </Modal.Actions>\n        </Modal>\n    )\n}\n\nexport default LeaderBoardModal;","import React, { useEffect, useContext } from 'react';\nimport { Heading, Box, Button, WorldMap } from 'grommet';\nimport { useHistory } from \"react-router-dom\";\nimport QuestionsSettings from './QuestionsSettings';\nimport ModalScore from './ModalScore';\nimport Context from '../store/Context';\nimport LeaderBoardModal from './LeaderBoardModal';\n\nfunction Homepage() {\n    const history = useHistory();\n    const { setDefaultData } = useContext(Context);\n    useEffect(() => {\n        setDefaultData();\n    }, [])\n\n    return (\n        <div className=\"app\">\n            <Box\n                direction=\"row\"\n                border={{ color: 'brand', size: 'large' }}\n                pad=\"medium\"\n                className=\"flex-column\"\n            >\n                <div>\n                    <Heading level={1} className=\"title\">Welcome to \"The Quiz\"</Heading>\n                </div>\n                <div>\n                    <WorldMap\n                        color=\"neutral-1\"\n                        continents={[\n                            {\n                                name: 'Europe',\n                                color: 'light-5',\n                                onClick: (name) => { },\n                            },\n                        ]}\n                        places={[\n                            {\n                                name: 'Sydney',\n                                location: [-33.8830555556, 151.216666667],\n                                color: 'accent-2',\n                                onClick: (name) => { },\n                            },\n                        ]}\n                    />\n                </div>\n                <div>\n                    <QuestionsSettings />\n                </div>\n                <div className=\"button-wrapper\">\n                    <Button primary label=\"Start the quiz\" onClick={() => {\n                        history.push('/quiz');\n                    }} />\n                </div>\n                <LeaderBoardModal />\n            </Box>\n            <ModalScore />\n        </div>\n    );\n}\n\nexport default Homepage;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\n\nexport const getQuestions = async (params: object) => {\n    const response = await axios.get('https://opentdb.com/api.php', {\n        params\n    });\n    return response.data;\n}","import React, { useContext, useEffect, useState } from 'react';\nimport { Heading, RadioButtonGroup, Button } from 'grommet';\nimport Context from '../store/Context';\nfunction Questions() {\n\n    const { questions, currentQuestion, setCurrentQuestion, answerToQuestion, answers, preSubmitQuestions, getNextQuestionIndex } = useContext(Context);\n    const question = questions.find((_: any, index: number) => index === currentQuestion);\n    const [response, setResponse] = useState<any>('');\n\n    useEffect(() => {\n        const ans = answers?.find((a: any) => a?.id === currentQuestion);\n        if (ans?.response) {\n            setResponse(ans?.response);\n        }\n        else {\n            setResponse('');\n        }\n    }, [currentQuestion]);\n    const labelForAnswer = `${answers.length !== questions.length ? 'Answer and go to next question' : 'Submit'}`\n\n    return (\n        <div>\n            <div>\n                <Heading level={3}><p dangerouslySetInnerHTML={{ __html: question?.question }}></p></Heading>\n                {question?.type === 'multiple' && (\n                    <RadioButtonGroup\n                        name=\"multiple-choise\"\n                        options={[...question.incorrect_answers, question.correct_answer]}\n                        value={response}\n                        onChange={(event) => {\n                            setResponse(event.target.value);\n                            answerToQuestion(event.target.value, currentQuestion);\n                        }}\n                    />\n                )}\n                {question?.type === 'boolean' && (\n                    <RadioButtonGroup\n                        name=\"multiple-choise\"\n                        options={['True', 'False']}\n                        value={response}\n                        onChange={(event) => {\n                            setResponse(event.target.value);\n                            answerToQuestion(event.target.value, currentQuestion);\n                        }}\n                    />\n                )}\n                <div className=\"buttons-wrapper\">\n                    <Button primary disabled={currentQuestion === 0} label=\"Go to previous question\" onClick={() => {\n                        if (currentQuestion > 0) {\n                            setCurrentQuestion(currentQuestion - 1);\n                        }\n                    }} />\n                    <Button primary disabled={!response} label={labelForAnswer} onClick={() => {\n                        if (answers.length === questions.length) {\n                            preSubmitQuestions();\n                            return;\n                        }\n                        if (questions?.[currentQuestion + 1]?.answered || currentQuestion + 1 === questions.length) {\n                            const nextQuestion = getNextQuestionIndex();\n                            if (nextQuestion !== -1) {\n                                setCurrentQuestion(nextQuestion);\n                            }\n                            return;\n                        }\n                        if (currentQuestion < questions?.length - 1) {\n                            setCurrentQuestion(currentQuestion + 1);\n                        }\n                    }} />\n                </div>\n                <div>Question {`${currentQuestion + 1}/${questions?.length}`}</div>\n            </div>\n        </div>\n    );\n}\n\nexport default Questions;\n","import React, { useContext, useState } from 'react';\nimport { Button, Modal } from 'semantic-ui-react';\nimport { Heading, TextInput } from 'grommet';\nimport { useHistory } from \"react-router-dom\";\nimport Context from '../store/Context';\n\nfunction ModalSubmit() {\n    const { modalSubmit, setModalSubmit, answers, questions, submitQuestions } = useContext(Context);\n    const history = useHistory();\n    const [name, setName] = useState<string>('');\n    console.log(name);\n\n    return (\n        <Modal\n            onClose={() => setModalSubmit(false)}\n            onOpen={() => setModalSubmit(true)}\n            open={modalSubmit}\n        >\n            <Modal.Header>Submit your answers</Modal.Header>\n            <Modal.Content>\n                <Modal.Description>\n                    <Heading level={3} className=\"title\">Are you sure that you want to submit your answer?</Heading>\n                </Modal.Description>\n                <Heading level={4} className=\"title\">Total answered questions:{answers?.length} of {questions?.length}</Heading>\n            </Modal.Content>\n            <Modal.Content>\n                <Heading level={4} className=\"title\">Please enter your name</Heading>\n                <TextInput id=\"text-input-id\"\n                    name=\"name\"\n                    placeholder=\"Name\"\n                    style={{ width: '200px' }}\n                    value={name}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)} />\n            </Modal.Content>\n            <Modal.Actions>\n                <Button onClick={() => setModalSubmit(false)}>Cancel</Button>\n                <Button onClick={() => {\n                    submitQuestions(name);\n                    history.push('/');\n                }} className=\"background-color-primary\">\n                    Submit\n        </Button>\n            </Modal.Actions>\n        </Modal>\n    )\n}\n\nexport default ModalSubmit","import React, { useContext, useEffect, useState } from 'react';\nimport { Heading, Box, Spinner, Clock, Anchor } from 'grommet';\nimport Context from '../store/Context';\nimport { getQuestions } from '../api/index';\nimport Questions from './Questions';\nimport ModalSubmit from './ModalSubmit';\nfunction Quiz() {\n\n    const { settings, questions, setQuestions, currentQuestion, setCurrentQuestion } = useContext(Context);\n    const [isLoading, setIsLoading] = useState<Boolean>(false);\n\n    const getQuestionsAsyncFunction = async () => {\n        setIsLoading(true);\n        const res = await getQuestions(settings);\n        setIsLoading(false);\n        setQuestions(res.results);\n    }\n    useEffect(() => {\n        getQuestionsAsyncFunction();\n    }, []);\n\n    return (\n        <div className=\"app\">\n            <Box\n                direction=\"row\"\n                border={{ color: 'brand', size: 'large' }}\n                pad=\"medium\"\n                className=\"flex-column\"\n            >\n                {isLoading && <div className=\"spinner-container\"><Spinner size=\"large\" /></div>}\n                {!isLoading && (\n                    <div>\n                        <div className=\"clock-wrapper\">\n                            <Clock type=\"digital\" run=\"backward\" time=\"T00:15:00\" />\n                        </div>\n                        <div>\n                            <Heading level={4}>Please answer the following question</Heading>\n                        </div>\n\n                        <div>\n                            <Questions />\n                        </div>\n                        <div>\n                            <ul className=\"ul-answers\">\n                                {questions.map((question: any, index: number) => {\n                                    return <li key={question.question} className={currentQuestion === index ? 'active' : ''} onClick={() => {\n                                        setCurrentQuestion(index)\n                                    }}>{index + 1}</li>\n                                })}\n                            </ul>\n                        </div>\n                    </div>\n                )}\n                <ModalSubmit />\n                <Anchor href='/' label=\"Go to homepage\" />\n            </Box>\n        </div>\n    );\n}\n\nexport default Quiz;\n","import React, { ReactElement, useState } from 'react';\nimport Context from './Context';\n\n\nconst getQuestionTypeValue = (qType: string) => {\n    switch (qType) {\n        case 'Multiple Choice':\n            return 'multiple';\n        case 'True/False':\n            return 'boolean';\n        default:\n            return '';\n    }\n}\n\nconst Provider = (\n    {\n        children\n    }: {\n        children: ReactElement\n    }\n) => {\n    const [stateSettings, setStateSettings] = useState<any>({\n        amount: 10, difficulty: 'easy', type: 'multiple'\n    });\n    const [questions, setQuestions] = useState<any[]>([]);\n    const [modalSubmit, setModalSubmit] = useState<boolean>(false);\n    const [currentQuestion, setCurrentQuestion] = useState<Number>(0);\n    const [answers, setAnswers] = useState<any[]>([]);\n    const [scoreData, setScoreData] = useState<any>({});\n    const [modalScore, setModalScore] = useState<boolean>(false);\n    const setDefaultData = () => {\n        setQuestions([]);\n        setCurrentQuestion(0);\n        setQuestions([]);\n        setAnswers([]);\n        setStateSettings({\n            amount: 10, difficulty: 'easy', type: 'multiple'\n        });\n    }\n    const setSettings = (amount: string, difficulty: string, type: string) => {\n        setStateSettings({\n            amount: Number(amount),\n            difficulty: difficulty.toLowerCase(),\n            type: getQuestionTypeValue(type)\n        })\n    };\n    const answerToQuestion = (response: any, index: number) => {\n        const answer = answers?.find(answer => answer?.id === index);\n        if (answer?.response) {\n            const newAnswers = answers.map(ans => {\n                if (ans?.id === index) {\n                    return {\n                        ...ans,\n                        response\n                    }\n                }\n                return ans;\n            });\n            setAnswers(newAnswers);\n        } else {\n            setAnswers([\n                ...answers,\n                {\n                    id: index,\n                    response\n                }])\n        }\n        const q = [...questions];\n        q[index] = {\n            ...q[index],\n            answered: true\n        }\n        setQuestions(q);\n    }\n    const preSubmitQuestions = () => {\n        setModalSubmit(true);\n    }\n\n    const submitQuestions = (name: string) => {\n        let score = 0;\n        answers.forEach(answer => {\n            console.log(answer, questions[answer.id])\n            if (answer.response === questions[answer.id].correct_answer) {\n                score++;\n            }\n        });\n        setScoreData({\n            score,\n            totalQuestions: questions?.length,\n            name: name || 'User'\n        });\n        const setLocalFromEmpty = () => localStorage.setItem('leaderBoard', JSON.stringify([\n            {\n                score,\n                totalQuestions: questions?.length,\n                name: name || 'User'\n            }\n        ]))\n        const leaderBord: string = localStorage.getItem('leaderBoard')!;\n        if (leaderBord) {\n            const leaders = JSON.parse(leaderBord);\n            if (leaders.length) {\n                localStorage.setItem('leaderBoard', JSON.stringify([\n                    ...leaders,\n                    {\n                        score,\n                        totalQuestions: questions?.length,\n                        name: name || 'User'\n                    }\n                ]))\n            }\n            else {\n                setLocalFromEmpty();\n            }\n        }\n        else {\n            setLocalFromEmpty();\n        }\n        setModalSubmit(false);\n        setModalScore(true);\n    }\n\n    const getNextQuestionIndex = () => {\n        const nextQuestion = questions.find(q => !q?.answered);\n        return questions?.indexOf(nextQuestion);\n    }\n    return (\n        <Context.Provider\n            value={{\n                setDefaultData,\n                settings: stateSettings,\n                setSettings,\n                questions,\n                setQuestions,\n                currentQuestion,\n                setCurrentQuestion,\n                answers,\n                answerToQuestion,\n                preSubmitQuestions,\n                getNextQuestionIndex,\n                modalSubmit,\n                setModalSubmit,\n                submitQuestions,\n                scoreData,\n                modalScore,\n                setModalScore\n            }}\n        >\n            {children}\n        </Context.Provider>\n    );\n}\nexport default Provider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/index.scss';\nimport HomePage from './components/Homepage';\nimport reportWebVitals from './reportWebVitals';\nimport Quiz from './components/Quiz';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Provider from './store/Provider';\n\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\nReactDOM.render(\n  <React.Fragment>\n    <Provider>\n      <Router>\n        <Switch>\n          <Route exact path=\"/quiz\">\n            <Quiz />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}